import java.util.regex.Pattern

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = pullVersion()
group = "gildiarz" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "mattermod"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
    maven {
        name = "ChickenBones Maven"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name = "JEI Maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
}

dependencies {
    deobfCompile "cofh:RedstoneFlux:1.12-2.1.0.+:universal"
    deobfCompile "cofh:CoFHCore:1.12.2-4.6.0.+:universal"
    deobfCompile "cofh:CoFHWorld:1.12.2-1.2.0.+:universal"
    deobfCompile "cofh:ThermalFoundation:1.12.2-2.6.0.+:universal"

    deobfCompile "codechicken:CodeChickenLib:1.12.2-3.1.7.+:universal"
    deobfCompile "mezz.jei:jei_1.12.2:4.8.0.+"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def pullVersion() {
    def file = file("src/main/java/gildiarz/mattermod/MatterMod.java")
    def version = ""
    def pattern = Pattern.compile("^\tpublic static final String VERSION = \"([\\d\\.]*)\";\$")
    file.eachLine { String s ->
        def matcher = pattern.matcher(s)
        if (matcher.matches()) {
            version = matcher.group(1)
            return
        }
    }
    return version
}
